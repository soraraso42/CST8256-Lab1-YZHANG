@page
@model InputModel
@{
    ViewData["Title"] = "Home page";
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
@* the Razor Pages engine will dynamically inject the necessary
part to finish the front-end validation such as displaying feedback messages *@
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
@* the data entry table  *@


<div class="text-center">
    <h1 class="display-4 mb-3">Calculator</h1>
    <p>Enter two numbers then press Calculate button to see their statistics.</p>
    @* use result of server side validation check to assign bs form validation class *@
    @* CONFIRMED: correct toggle of invalid class according to server side validation status *@
    @* TODO(FIXED): correctly bound messages not displaying *@
    @* FIXED: put the nullable message inside span element *@
    <form method="post">
        <div class="form-group mb-3">
            <label asp-for="NumberOne"></label>
            <input asp-for="NumberOne" type="text" class="form-control @(ModelState[nameof(InputModel.NumberOne)]?.Errors.Count > 0 ? "is-invalid" : "")" />
            <div class="invalid-feedback">
                @if (ModelState[nameof(InputModel.NumberOne)]?.Errors.Count > 0)
                {
                    <span>@ModelState[nameof(InputModel.NumberOne)].Errors[0].ErrorMessage</span>
                }
            </div>
        </div>

        <div class="form-group mb-3">
            <label asp-for="NumberTwo"></label>
            <input asp-for="NumberTwo" type="text" class="form-control @(ModelState[nameof(InputModel.NumberTwo)]?.Errors.Count > 0 ? "is-invalid" : "")" />
            <div class="invalid-feedback">
                @if (ModelState[nameof(InputModel.NumberTwo)]?.Errors.Count > 0)
                {
                    <span>@ModelState[nameof(InputModel.NumberTwo)].Errors[0].ErrorMessage</span>
                }
            </div>
        </div>
           
        <div class="form-group mb-3">
            <label asp-for="NumberThree"></label>
            <input asp-for="NumberThree" type="text" class="form-control @(ModelState[nameof(InputModel.NumberThree)]?.Errors.Count > 0 ? "is-invalid" : "")" />
            <div class="invalid-feedback">
                @if (ModelState[nameof(InputModel.NumberThree)]?.Errors.Count > 0)
                {
                    <span>@ModelState[nameof(InputModel.NumberThree)].Errors[0].ErrorMessage</span>
                }
            </div>
        </div>

        <div class="form-group mb-3">
            <label asp-for="NumberFour"></label>
            <input asp-for="NumberFour" type="text" class="form-control @(ModelState[nameof(InputModel.NumberFour)]?.Errors.Count > 0 ? "is-invalid" : "")" />
            <div class="invalid-feedback">
                @if (ModelState[nameof(InputModel.NumberFour)]?.Errors.Count > 0)
                {
                    <span>@ModelState[nameof(InputModel.NumberFour)].Errors[0].ErrorMessage</span>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Calculate</button>
    </form>
</div>



@* form validation logic handled in code-behind *@
<div asp-validation-summary="ModelOnly" class="text-danger"></div>



@if (Model.StatisticsResult != null)
{
    <div>
        @Html.Raw(Model.StatisticsResult)
    </div>
}